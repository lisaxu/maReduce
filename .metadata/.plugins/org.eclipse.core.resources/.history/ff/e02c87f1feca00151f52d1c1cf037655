package pa1;
//reference: https://books.google.com/books?id=6BmkBwAAQBAJ&pg=PT297&lpg=PT297&dq=difference+between+byteswritable+and+text&source=bl&ots=79KL529SRr&sig=dUfAFxKjnm6ejttIAJHKrgBvLDI&hl=en&sa=X&ved=0ahUKEwj6rcaykdvKAhWmu4MKHY65C78Q6AEINjAE#v=onepage&q=difference%20between%20byteswritable%20and%20text&f=false
//source: Hadoop: The Definitive Guide
import java.io.IOException;
 
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.IOUtils;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.RecordReader;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
 
public class WholeFileRecordReader extends RecordReader<Text, BytesWritable> {
private FileSplit fileSplit;
private Configuration conf;
private BytesWritable value = new BytesWritable();
private boolean processed = false;
 
@Override
public void initialize(InputSplit split, TaskAttemptContext context) throws IOException, InterruptedException{
    this.fileSplit = (FileSplit) split;
    this.conf = context.getConfiguration();
}
 
@Override
public boolean nextKeyValue() throws IOException, InterruptedException{
    if (!processed){
        byte[] contents = new byte[(int) fileSplit.getLength()];
        Path file = fileSplit.getPath();
        FileSystem fs = file.getFileSystem(conf);
        FSDataInputStream in = null;
        try{
            in = fs.open(file);
            IOUtils.readFully(in, contents, 0, contents.length);
            value.set(contents, 0, contents.length);
        }finally{
            IOUtils.closeStream(in);
        }
        processed = true;
        return  true;
    }
    return false;
}
 
@Override
public Text getCurrentKey() throws IOException, InterruptedException{
    return new Text(this.fileSplit.getPath().getName());
}
 
@Override
public BytesWritable getCurrentValue() throws IOException, InterruptedException{
    return value;
}
 
@Override
public float getProgress() throws IOException,  InterruptedException{
    return processed ? 1.0f : 0.0f;
}
 
@Override
public void close() throws IOException{
}
}